{
  "version": 3,
  "sources": ["../../build/js/data.js", "../../build/js/helperFunctions.js", "../../build/js/index.js"],
  "sourcesContent": ["export const claims = [\n  \"My chceme znovu motýle\",\n  \"Není to moje. Je to nějaký firmy, která patří do holdingu\",\n  \"Nikdy neodstoupím, nikdy! Nech si to všichni zapamatují. Nikdy\",\n  \"ti, kteří měli přijít, nepřišli\",\n  \"Best in covid\",\n  \"Ano, lobboval jsem za biopaliva\",\n  \"Orbán je můj přítel, naše vztahy jsou skutečně nadstandardní\",\n  \"Můžeme přijmout tisíce migrantů, můžou pracovat v mých fabrikách\",\n  \"Ještě 4 roky a dost, teď už fakt!\",\n  \"Důchodcům lžu, protože mi na to vždycky skočí\",\n  \"Stačí jim přidat pár kaček a jdou mě volit\",\n  \"Testy na Covid rušim, aby to vypadalo, že už Covid neni\",\n  \"Nikdo vám nemůže dát ani zlomek toho, co já vám dokážu slíbit\",\n  \"Je to kampaň\"\n];\n\nexport const generators = [\n  { url: \"https://picsum.photos/800\", weight: 5 },\n  { url: \"https://source.unsplash.com/800x800\", weight: 10 },\n  { url: \"https://source.unsplash.com/800x800/?communism\", weight: 3 },\n  { url: \"https://source.unsplash.com/800x800/?cat\", weight: 1 },\n  { url: \"https://source.unsplash.com/800x800/?puppy\", weight: 1 },\n  { url: \"https://source.unsplash.com/800x800/?chicken\", weight: 1 },\n  { url: \"https://source.unsplash.com/800x800/?angry\", weight: 3 },\n];\n", "/* eslint-disable no-param-reassign */\nexport const splitText = (text, maxLineLength) => {\n  const result = [];\n  while (text.length > maxLineLength) {\n    let pos = text.substring(0, maxLineLength).lastIndexOf(\" \");\n    pos = pos <= 0 ? maxLineLength : pos;\n    result.push(text.substring(0, pos));\n    let i = text.indexOf(\" \", pos) + 1;\n    if (i < pos || i > pos + maxLineLength) i = pos;\n    text = text.substring(i);\n  }\n  result.push(text);\n  return result;\n};\n\nexport const pickRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];\n\nexport const getAverageLuminance = (rgbData, pixelSkip = 6) => {\n  const luminanceOf = (r, g, b) => (0.2126 * r) + (0.7152 * g) + (0.0722 * b);\n  let luminanceSum = 0;\n  let luminanceDivisor = 0;\n  for (let i = 0; i < rgbData.length; i += 3 * pixelSkip) {\n    // +3 for R+G+B; pixelSkip because we don't need that many samples => less accurate, but faster!\n\n    const [r, g, b] = [rgbData[i] / 255, rgbData[i + 1] / 255, rgbData[i + 2] / 255];\n    const luminance = luminanceOf(r, g, b);\n    if (!Number.isNaN(luminance)) {\n      luminanceSum += luminance;\n      luminanceDivisor += 1;\n    }\n  }\n\n  return luminanceSum / luminanceDivisor;\n};\n", "import { claims, generators } from \"./data.js\";\nimport { splitText, pickRandom, getAverageLuminance } from \"./helperFunctions.js\";\n\nconst LOGO_OFFSET_X = 480;\nconst LOGO_OFFSET_Y = 30;\nconst LUMINANCE_THRESHOLD = 0.7;\n\nconst unrolledGenerators = generators.flatMap(({ url, weight }) => Array(weight).fill(url));\n\nconst imageReader = new FileReader();\n\nconst logoLight = new Image();\nlogoLight.src = \"public/logo-light.png\";\n\n\nlet currentImage = new Image();\nlet currentText = \"Test text\";\n\nconst rerollImage = async () => {\n  const imageData = await fetch(pickRandom(unrolledGenerators));\n\n  return new Promise((resolve) => {\n    const image = new Image();\n\n    image.addEventListener(\"load\", () => {\n      currentImage = image;\n      resolve();\n    });\n\n    image.crossOrigin = \"anonymous\";\n    image.src = imageData.url;\n  });\n};\n\nconst rerollText = () => {\n  currentText = pickRandom(claims);\n};\n\nconst grayScale = (context, canvas) => {\n  var imgData = context.getImageData(0, 0, canvas.width, canvas.height);\n      var pixels  = imgData.data;\n      for (var i = 0, n = pixels.length; i < n; i += 4) {\n      var grayscale = pixels[i] * .3 + pixels[i+1] * .59 + pixels[i+2] * .11;\n      pixels[i  ] = grayscale;        // red\n      pixels[i+1] = grayscale;        // green\n      pixels[i+2] = grayscale;        // blue\n      //pixels[i+3]              is alpha\n  }\n  //redraw the image in black & white\n  context.putImageData(imgData, 0, 0);\n}\n\nconst canvas = document.getElementById(\"picture\");\nconst ctx = canvas.getContext(\"2d\");\nconst font = new FontFace(\"Bebas Neue\", \"url(public/BebasNeue-Bold.ttf)\");\n\nconst initFont = async () => {\n  await font.load();\n  document.fonts.add(font);\n};\n\nconst setFile = (file) => {\n  if (!file.type.startsWith(\"image/\")) {\n    return;\n  }\n\n  imageReader.readAsDataURL(file);\n};\n\ncanvas.addEventListener(\"dragover\", (e) => e.preventDefault());\n\ncanvas.addEventListener(\"drop\", (e) => {\n  e.preventDefault();\n  if (!e.dataTransfer || e.dataTransfer.files.length <= 0) {\n    return;\n  }\n\n  setFile(e.dataTransfer.files[0]);\n});\n\nconst repaintImage = async () => {\n  // clear to black (for transparent images)\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  // scale image to always fill the canvas\n  const scaleX = canvas.width / currentImage.width;\n  const scaleY = canvas.height / currentImage.height;\n  const scale = Math.max(scaleX, scaleY);\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\n  ctx.drawImage(currentImage, 0, 0);\n  grayScale(ctx,canvas);\n  ctx.setTransform(); // reset so that everything else is normal size\n\n  // calculate luminance to decide whether the logo will be light or dark\n  const imgd = ctx\n    .getImageData(LOGO_OFFSET_X, LOGO_OFFSET_Y, logoLight.width, logoLight.height)\n    .data;\n  const luminanceAverage = getAverageLuminance(imgd);\n\n\n    ctx.drawImage(logoLight, LOGO_OFFSET_X, LOGO_OFFSET_Y,logoLight.width/2.5, logoLight.height/2.5);\n\n\n  const lines = splitText(currentText, 20).reverse();\n  const fontSize = lines.length < 5 ? 60 : 40;\n  ctx.font = `${fontSize}px 'Bebas Neue'`;\n  lines.forEach((line, index) => {\n    const x = 30;\n    const y = 685;\n    const padding = 15;\n    const lineHeight = padding + fontSize;\n    ctx.fillStyle = \"#00ff00\";\n    ctx\n      .fillRect(x, y - (index * lineHeight), ctx.measureText(line).width + 2 * padding, lineHeight);\n    ctx.textBaseline = \"top\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(line, x + padding, y + padding - (index * lineHeight));\n  });\n};\n\nimageReader.addEventListener(\"load\", (e) => {\n  currentImage = new Image();\n  currentImage.addEventListener(\"load\", () => repaintImage());\n  currentImage.src = e.target.result;\n});\n\nconst buttonRandom = document.getElementById(\"randomize\");\nbuttonRandom.addEventListener(\"click\", async () => {\n  rerollText();\n  await rerollImage();\n  repaintImage();\n});\n\nconst buttonRandomImg = document.getElementById(\"randomize-img\");\nbuttonRandomImg.addEventListener(\"click\", async () => {\n  await rerollImage();\n  repaintImage();\n});\n\nconst buttonRandomText = document.getElementById(\"randomize-text\");\nbuttonRandomText.addEventListener(\"click\", () => {\n  rerollText();\n  repaintImage();\n});\n\nconst inputCustomImg = document.getElementById(\"customImage\");\ninputCustomImg.addEventListener(\"change\", (e) => {\n  e.preventDefault();\n  if (e.target.files.length <= 0) {\n    return;\n  }\n  setFile(e.target.files[0]);\n});\nconst buttonCustomImg = document.getElementById(\"customImageBtn\");\nbuttonCustomImg.addEventListener(\"click\", () => {\n  inputCustomImg.click();\n});\n\nconst inputCustom = document.getElementById(\"customText\");\nconst replaceWithCustomText = async (e) => {\n  if (e.type === \"input\" || inputCustom.value) {\n    currentText = inputCustom.value;\n    repaintImage();\n  }\n};\ninputCustom.addEventListener(\"click\", replaceWithCustomText);\ninputCustom.addEventListener(\"input\", replaceWithCustomText);\n\nconst downloadLinkReal = document.createElement(\"a\");\ndownloadLinkReal.setAttribute(\"download\", \"pravda.jpg\");\nconst linkSave = document.getElementById(\"save\");\nlinkSave.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n  downloadLinkReal.setAttribute(\"href\", canvas.toDataURL(\"image/jpeg\").replace(\"image/jpeg\", \"image/octet-stream\"));\n  downloadLinkReal.click();\n});\n\ninitFont();\n\nrerollText();\nrerollImage()\n  .then(() => repaintImage());\n"],
  "mappings": "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",
  "names": []
}
